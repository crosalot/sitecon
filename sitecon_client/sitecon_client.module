<?php

/**
 * Implementation of hook_menu().
 */
function sitecon_client_menu() {
  $items['admin/config/sitecon/client'] = array(
    'title' => 'Server List',
    'description' => 'List of servers to this site use service.',
    'page callback' => 'sitecon_list',
    'page arguments' => array('client'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/sitecon/client/add'] = array(
    'title' => 'Add server',
    'description' => 'Add server key and domain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitecon_form', NULL, 'client'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/sitecon/client/%/edit'] = array(
    'title' => 'Update server',
    'description' => 'Update server key and domain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitecon_form', 4, 'client'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/sitecon/client/%/delete'] = array(
    'title' => 'Delete server',
    'description' => 'Delete client.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitecon_delete_form', 4, 'client'),
    'access arguments' => array('administer site configuration'),
  );
  $items['sitecon/client/connect/%/%'] = array(
    'page callback' => 'sitecon_client_connect',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['sitecon/client/confirm'] = array(
    'page callback' => 'sitecon_client_confirm',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function sitecon_client_get_session($sid) {
  return db_query("SELECT sid FROM {sitecon_client_session} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
}

function sitecon_client_add_session($sid) {
  db_merge('sitecon_client_session')
    ->key(array(
      'sid' => $sid,
    ))
    ->execute();
}

function sitecon_client_delete_session($sid) {
  db_delete('sitecon_client_session')
    ->condition('sid', $sid)
    ->execute();
}

function sitecon_client_connect($id, $status, $account = NULL) {
  global $user;
  $_GET = array_merge($_GET, $_POST);
  
  // User can't access if not logged in.
  if ($user->uid) {
    // $id param are domain name or domain id
    $server = is_numeric($id)? sitecon_get_item($id, 'client'): sitecon_get_item_from_domain($id, 'client');
    
    if (!$server) {
      drupal_not_found();
    }

    // implement hook
    $allow = TRUE;
    foreach (module_implements('sitecon_client_allow_con') as $name) {
      $function = $name .'_sitecon_client_allow_con';
      $allow = $allow && $function($server);
    }   
    if (!$allow) {
      return;
    }

    $data->sid = $user->sid? $user->sid: session_id();
    $data->mail = $user->mail;
    if ($_GET['use_name'] == 'true') {
      $data->name = $user->name;
    }
    
    if ($status == 'after_update') {
      $data->name = $account->name;
      $data->language = $account>language;
      $data->pass = $account->pass;
    }

    // One time connect for security @see sitecon_client_confirm
    sitecon_client_add_session($data->sid);

    $query = drupal_http_build_query(array(
      'status' => $status,
      'id' => $server->id,
      'apikey' => $server->apikey,
      'code' => sitecon_encode($server->privatekey, $data),
    ));
    
    // Request with iframe because iframe similar that user go to the server page and server can auto login for this user
    $output .= '<iframe src ="http://'.$server->domain.'/sitecon/server/connect?'.$query.'" width="0" height="0" style="display: none;">';
    $output .=  '<p>Your browser does not support iframes.</p>';
    $output .=  '</iframe>';
    $output .= 'http://'.$server->domain.'/sitecon/server/connect?status='.$status.'&id='.$server->id.'&apikey='.$server->apikey.'&code='.sitecon_encode($server->privatekey, $data);
    
    if (isset($_GET['redirect'])) {
      $output = '<html><head><title>redirect</title><meta http-equiv="refresh" content="0;url='.$_GET['redirect'].'" /></head><body>'.$output.'</body></html>';
    }
    if ($_GET['format'] == 'json') {
      drupal_json_output($output);
    }
    else {
      print $output;
    }
  }
}

function sitecon_client_confirm() {
  $_GET = array_merge($_GET, $_POST);

  $server = sitecon_get_item($_GET['id'], 'client');
  $data = sitecon_decode($server->privatekey, $_GET['code']);
  
  // One time connect for security
  if (TRUE || sitecon_client_get_session($data->sid)) {
    sitecon_client_delete_session($sid);
    $account = db_query("SELECT u.* FROM {users} u, {sessions} s WHERE u.uid = s.uid AND s.sid = :sid", array(':sid' => $data->sid))->fetchObject();
    
    if ($account) {
      // Delete large data and not use.
      unset($account->session);
      print sitecon_encode($server->privatekey, $account);
    }
    else {
      if ($_GET['status'] != 'login') {
        print sitecon_encode($server->privatekey, $data);
      }
      else {
        print sitecon_encode($server->privatekey, FALSE);
      }
    }
  }
  else {
    print sitecon_encode($server->privatekey, FALSE);
  }
}

function sitecon_client_user($op, &$edit, &$account) {
  $redirect = '';
  if (user_access('site connection')) {
    $rs = db_query("SELECT id FROM {sitecon_client}");
    $redirect = $op == 'update'? 'user': $redirect;
    print '<html><head><title>redirect</title><meta http-equiv="refresh" content="0;url=/'.$redirect.'" /></head><body>';
    foreach ($rs as $server) {
      sitecon_client_connect($server->id, $op, $account);
    }
    print '</body></html>';
  }
}

/**
 * Implementation of hook_user_login().
 */
function sitecon_client_user_login(&$edit, $account) {
  sitecon_client_user('login', $edit, $account);
}

/**
 * Implementation of hook_user_logout().
 */
function sitecon_client_user_logout(&$edit, $account) {
  sitecon_client_user('logout', $edit, $account);
}

/**
 * Implementation of hook_user_update().
 */
function sitecon_client_user_update(&$edit, $account, $category) {
  sitecon_client_user('after_update', $edit, $account);
}
