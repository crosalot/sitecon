<?php

/**
 * Implementation of hook_permission().
 */
function sitecon_permission() {
  return array(
    'site connection' => array(
      'title' => t('Multiple site connection'),
      'description' => t('When user login/logout on this site, auto login/logout server site.'),
    )
  );
}
/**
 * Implementation of hook_menu().
 */
function sitecon_menu() {

  $items['admin/config/sitecon/global'] = array(
   'title' => 'Global',
   'type' => MENU_DEFAULT_LOCAL_TASK,
   'access arguments' => array('administer site configuration'),
   'weight' => -10,
  );
    
  $items['admin/config/sitecon'] = array(
    'title' => 'Sites Connections',
    'description' => 'Sites connections many to many sites.',
    'page callback' => 'sitecon',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function sitecon() {
  return 'Sites connections many to many sites. You can install server or client module for support sites connections module';
}

function sitecon_encode($key, $data) {
  $data = serialize($data);
  $key = sha1($key);
  $str_len = strlen($data);
  $key_len = strlen($key);
  $j = 0;
  for ($i = 0; $i < $str_len; $i++) {
    $ord_str = ord(substr($data, $i, 1));
    if ($j == $key_len) { $j = 0; }
    $ord_key = ord(substr($key, $j, 1));
    $j++;
    $hash .= strrev(base_convert(dechex($ord_str + $ord_key), 16, 36));
  }
  return $hash;
}

function sitecon_decode($key, $data) {
  $key = sha1($key);
  $str_len = strlen($data);
  $key_len = strlen($key);
  $j = 0;
  for ($i = 0; $i < $str_len; $i+=2) {
    $ord_str = hexdec(base_convert(strrev(substr($data, $i, 2)), 36, 16));
    if ($j == $key_len) { $j = 0; }
    $ord_key = ord(substr($key, $j, 1));
    $j++;
    $hash .= chr($ord_str - $ord_key);
  }
  $hash = unserialize($hash);
  return $hash;
}

function sitecon_autoregister($user) {
  if ($user->pass) {
    if($account = db_query("SELECT * FROM users WHERE LOWER(name) = LOWER(:name)", array(':name' => $user->name))->fetchObject()) {
      return $account;
    }
  }
  // Case email already registered
  if ($account = db_query("SELECT * FROM users WHERE LOWER(mail) = LOWER(:mail)", array(':mail' => $user->mail))->fetchObject()) {
    return $account;
  }
  if ($account = db_query("SELECT * FROM users WHERE LOWER(name) = LOWER(:mail)", array(':mail' => $user->mail))->fetchObject()) {
    return;
  }
  
  $pass = ($user->pass? $user->pass: user_password());
  $account = array(
    'name' => $user->name? $user->name: $user->mail,
    'mail' => $user->mail,
    'timezone' => ($user->timezone? $user->timezone: variable_get('date_default_timezone', NULL)), 
    'pass' => $pass, 
    'init' => $user->mail, 
    'roles' => array(),
    'status' => 1 
  );
  $account = user_save('', $account);
  // Update password directly because user_save convert password to md5 normaly.
  db_update('users')
    ->fields(array('pass' => $pass))
    ->condition('uid', $account->uid)
    ->execute();
  _user_mail_notify('register_no_approval_required', $account);
  
  return $account;
}

function sitecon_autologin($account) {
  global $user;
  if (!$account || drupal_is_denied(ip_address()) || $user->uid) { return $account; }
  $user = user_load($account->uid);
  user_login_finalize();
  return $user;
}

function sitecon_autologout() {
  global $user;
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  // Destroy the current session:
  session_destroy();
  // Only variables can be passed by reference workaround.
  $null = NULL;
  user_module_invoke('logout', $null, $user);

  // Load the anonymous user
  $user = drupal_anonymous_user();
}

// Settings form for server and client extends ====================================

function sitecon_list($type) {
  $rs = db_select('sitecon_'.$type, 's')
    ->fields('s')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->limit(220)
    ->execute();
  $items = array();
  foreach ($rs as $item) {
    $items[] = array(l($item->domain, 'admin/config/sitecon/'.$type.'/'.$item->id.'/edit'), $item->apikey);
  }
  return theme('table', array(
    'header' => array('Domain', 'API Key'), 
    'rows' => $items,
  )).theme('pager');
}

/**
 * Implementation of hook_form().
 */
function sitecon_form($node, $form_state, $id = 0, $type) {
  $item = sitecon_get_item($id, $type);
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );
  $form['privatekey'] = array(
    '#type' => 'password',
    '#title' => t('Private Key'),
  );
  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#default_value' => $item->domain,
  );
  $form['apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => $item->apikey,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t($id? 'update': 'create'),
  );
  if ($id) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('delete'),
    );
    $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $id
    );
  }
  return $form;
}

/**
 * Implementation of hook_submit().
 */
function sitecon_form_submit($form, &$form_state) {
  $type = $form_state['values']['type'];
  switch ($form_state['values']['op']) {
    case 'create':
      db_merge('sitecon_'.$type)
        ->key(array(
          'privatekey' => md5($form_state['values']['privatekey']),
          'domain' => $form_state['values']['domain'],
        ))
        ->fields(array(
          'apikey' => $form_state['values']['apikey'],
        ))
        ->execute();
      break;
    case 'update':
      $fields = array(
        'domain' => $form_state['values']['domain'],
        'apikey' => $form_state['values']['apikey'],
      );
      if ($form_state['values']['privatekey']) {
        $fields['privatekey'] = md5($form_state['values']['privatekey']);
      }
      db_update('sitecon_'.$type)
        ->fields($fields)
        ->condition('id', $form_state['values']['id'])
        ->execute();
      break;
    case 'delete':
      drupal_goto('admin/config/sitecon/'.$type.'/'.$form_state['values']['id'].'/delete');
      break;
  }
  drupal_set_message(ucfirst($form_state['values']['op']).' completed.');
  drupal_goto('admin/config/sitecon/'.$type);
}

/**
 * Implementation of hook_form().
 */
function sitecon_delete_form($node, $form_state, $id = 0, $type) {
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );
  $form['delete'] = array(
    '#type' => 'markup',
    '#value' => '<div>Are you sure you want to delete this item?</div>',
  );
  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Confirm',
  );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
  );
  return $form;
}

function sitecon_delete_form_submit($form, &$form_state) {
  $type = $form_state['values']['type'];
  if ($form_state['values']['op'] == 'Confirm') {
    db_delete('sitecon_'.$type)
      ->condition('id', $form_state['values']['id'])
      ->execute();
    drupal_goto('admin/config/sitecon/'.$type);
  }
  else {
    drupal_goto('admin/config/sitecon/'.$type.'/'.$form_state['values']['id'].'/edit');
  }
}

function sitecon_get_item($id = 0, $type) {
  return db_query("SELECT * FROM {sitecon_$type} WHERE id = :id", array(':id' => $id))->fetchObject();
}

function sitecon_get_item_from_domain($domain, $type) {
  return db_query("SELECT * FROM {sitecon_$type} WHERE domain = :domain", array(':domain' => $domain))->fetchObject();
}

function sitecon_get_item_from_apikey($apikey, $type) {
  return db_query("SELECT * FROM {sitecon_$type} WHERE apikey = :apikey", array(':apikey' => $apikey))->fetchObject();
}
